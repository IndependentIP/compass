<chapter id="core-jsem">
  <title>JSEM - JSOM to Search Engine Mapping</title>

  <sect1 id="jsem-introduction">
    <title>Introduction</title>
    
    <para>
      Compass provides the ability to map JSON to the underlying Search Engine through simple XML mapping files, we call this technology JSEM (JSON to Search Engine Mapping). The JSEM files are used by Compass to extract the required JSON elements at run-time and inserting the required meta-data into the Search Engine index. Mappings can be done explicitly for each JSON element, or let Compass dynamically add all JSON elements from a certain JSON element recursively.
    </para>
    
    <para>
      Lets start with a simple example. The following is a sample JSON that we will work with:
<programlisting><![CDATA[{   
    "id": 1,
    "name": "Mary Lebow",
    "address": {
      "street": "5 Main Street"
      "city": "San Diego, CA",
      "zip": 91912,
    },
    "phoneNumbers": [
      "619 332-3452",
      "664 223-4667"
    ]
  }
}
]]></programlisting>      
    </para>
    
    <para>
      Now, lets see different ways of how we can map this JSON into the search engine. The first option will be to use fully explicit mappings:
<programlisting><![CDATA[<root-json-object alias="addressbook">
    <json-id name="id" value-converter="int" />
    <json-property name="name" />
    <json-object name="address">
        <json-property name="street" />
        <json-property name="city" />
        <json-property name="zip" index="un_tokenized" />
        <json-array name="phoneNumbers" index-name="phoneNumber">
            <json-property />
        </json-array>
    </json-object>
</root-json-object>
]]></programlisting>      
    </para>

    <para>
      The above explicit mapping defines how each JSON element will be mapped to the search engine. In the above case, we will have several searchable properties named after their respective JSON element names (the name can be changed by using <literal>index-name</literal> attribute). We can now perform search queries such as <literal>street:diego</literal>, or <literal>phoneNumber:619*</literal>, or even (using dot path notation): <literal>addressbook.address.street:diego</literal>.
    </para>
    
    <para>
      Many times though, explicit mapping of all the JSON elements is a bit of a pain, and does not work when wanting to create a generic indexing service. In this case, Compass allows to dynamically and recursively map JSON element. Here is an example where the JSON <literal>address</literal> element is mapped dynamically, thus adding any element within it dynamically to the search engine:
<programlisting><![CDATA[<root-json-object alias="addressbook">
    <json-id name="id" value-converter="int" />
    <json-property name="name" />
    <json-object name="address" dynamic="true" />
</root-json-object>
]]></programlisting>      
    </para>
    
    <para>
      The dynamic aspect can even be set on the <literal>root-json-object</literal> allows to create a completely generic JSON indexing service which requires only setting the id JSON element.
    </para>

  </sect1>

</chapter>
