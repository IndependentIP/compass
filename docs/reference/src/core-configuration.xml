<chapter id="core-configuration">
  <title>Configuration</title>

  <para>
    Compass must be configured to work with a specific applications domain model. There are a large number of configuration parameters available (with default settings), which controls how Compass works internal and with the underlying Search Engine. This section describes the configuration API and parameters.
  </para>

  <sect1 id="ProgrammaticConfiguration">
    <title>Programmatic Configuration</title>

    <para>
      An instance of <literal>CompassConfiguration</literal> represents a set of mappings (one or more OSEM or Resource mappings), Common Meta Data definitions, transaction and Search Engine parameters. <literal>CompassConfiguration</literal> is used to build an immutable <literal>Compass</literal> instance.
    </para>

    <para>
      <literal>CompassConfiguration</literal> provides several API's for adding OSEM and Resource mapping (suffixed <literal>.cpm.xml</literal>), as well as Common Meta Data definition (suffixed <literal>.cmd.xml</literal>). The following table summarizes the most important API's:

      <table>
         <title>Configuration Mapping API</title>
        <tgroup cols="2">
          <colspec colname="c1" colwidth="4*" />
          <colspec colname="c2" colwidth="5*" />
          <thead>
            <row>
              <entry>API</entry><entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>addFile(String)</literal></entry>
              <entry>Loads the mapping file (<literal>cpm</literal> or <literal>cmd</literal>) according to the specified file path string.</entry>
            </row>
            <row>
              <entry><literal>addFile(File)</literal></entry>
              <entry>Loads the mapping file (<literal>cpm</literal> or <literal>cmd</literal>) according to the specified file object reference.</entry>
            </row>
            <row>
              <entry><literal>addClass(Class)</literal></entry>
              <entry>Loads the mapping file (<literal>cpm</literal>) according to the specified class. <literal>test.Author.class</literal> will map to <literal>test/Author.cpm.xml</literal> within the class path.</entry>
            </row>
            <row>
              <entry><literal>addURL(URL)</literal></entry>
              <entry>Loads the mapping file (<literal>cpm</literal> or <literal>cmd</literal>) according to the specified URL.</entry>
            </row>
            <row>
              <entry><literal>addResource(String)</literal></entry>
              <entry>Loads the mapping file (<literal>cpm</literal> or <literal>cmd</literal>) according to the specified resource path from the class path.</entry>
            </row>
            <row>
              <entry><literal>addInputStream(InputStream)</literal></entry>
              <entry>Loads the mapping file (<literal>cpm</literal> or <literal>cmd</literal>) according to the specified input stream.</entry>
            </row>
            <row>
              <entry><literal>addDirectory(String)</literal></entry>
              <entry>Loads all the files named <literal>*.cpm.xml</literal> or <literal>*.cmd.xml</literal> from within the specified directory.</entry>
            </row>
            <row>
              <entry><literal>addJar(File)</literal></entry>
              <entry>Loads all the files named <literal>*.cpm.xml</literal> or <literal>*.cmd.xml</literal> from within the specified Jar file.</entry>
            </row>
            <row>
              <entry><literal>addMappingResolver(MappingResolver)</literal></entry>
              <entry>Uses a class that implements the <literal>MappingResolver</literal> to get an <literal>InputStream</literal> for xml mapping definitions.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

    </para>

    <para>
       Other than mapping file configuration API (<literal>CompassConfiguration</literal>), Compass::Core can be configured through the <literal>CompassSettings</literal> interface. <literal>CompassSettings</literal> is similar to Java <literal>Properties</literal> class and is accessible via the <literal>CompassConfiguration.getSettings()</literal> or the <literal>CopmassConfiguration.setSetting(String setting, String value)</literal> methods. Compass's many different settings are explained in the Configuration Settings apendix.
    </para>

    <para>
      Compass setting can also be defined programmatically using the <literal>org.compass.core.config.CompassEnvironment</literal> and <literal>org.compass.core.lucene.LuceneEnvironment</literal> classes (hold programmatic manifestation of all the different settings).
    </para>

    <para>
      In terms of required settings, <literal>Compass</literal> only requires the <literal>compass.engine.connection</literal> (which maps to <literal>CompassEnvironment.CONNECTION</literal>) parameter defined.
    </para>

    <para>
      Global Converters (classes that implement Compass <literal>Converter</literal>) can also be registered with the configuration to be used by the created compass instances. The <literal>Converter</literal>s are registered under a logical name, and can be referenced in the mapping definitions. The method to register a global converter is <literal>registerConverter</literal>.
    </para>

    <para>
      Again, many words and so little code... . The following code example shows the minimal <literal>CompassConfiguration</literal> with programmatic control:
<programlisting><![CDATA[CompassConfiguration conf = new CompassConfiguration()
     .setSetting(CompassEnvironment.CONNECTION, "my/index/dir")
     .addResource(DublinCore.cmd.xml)
     .addClass(Author.class);
]]></programlisting>
    </para>

  </sect1>

  <sect1 id="XMLConfiguration">
     <title>XML Configuration</title>

     <para>
       All of Compass's operational configuration (apart from mapping definitions) can be defined in a single xml configuration file, with the default name <literal>compass.cfg.xml</literal>. You can define the environmental settings and mapping file locations within this file. The following table shows the different <literal>CompassConfiguration</literal> API's for locating the main configuration file:

       <table>
         <title>Compass Configuration API</title>
         <tgroup cols="2">
           <colspec colname="c1" colwidth="3*" />
           <colspec colname="c2" colwidth="5*" />
           <thead>
             <row><entry>API</entry><entry>Description</entry></row>
           </thead>
           <tbody>
             <row>
               <entry><literal>configure()</literal></entry>
               <entry>Loads a configuration file called <literal>compass.cfg.xml</literal> from the root of the class path.</entry>
             </row>
             <row>
               <entry><literal>configure(String)</literal></entry>
               <entry>Loads a configuration file from the specified path</entry>
             </row>
           </tbody>
         </tgroup>
       </table>

     </para>
     
     <sect2 id="XmlConfigurationSchema">
        <title>Schema Based Configuration</title>
     
        <para>
           The preferred way to configure Compass (and the simplest way) is to use an Xml configuration file, which validates against a Schema. It allows for richer and more descriptive (and less erroneous) configuration of Compass. The schema is fully annotated, with each element, attribute documented within the schema. Note, that some additional information is explained in the Configuration Settings appendix, even if it does not apply in terms of the name of the setting to be used, it is advisable to read the appropriate section for more fuller explanation (such as converters, highlighters, analyzers, and so on).
        </para>
     
        <para>
           Here are a few sample configuration files, the first is a simple file based index with the OSEM definitions for the Author class.

<programlisting><![CDATA[<compass-core-config xmlns="http://www.opensymphony.com/compass/schema/core-config"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.opensymphony.com/compass/schema/core-config
           http://www.opensymphony.com/compass/schema/compass-core-config.xsd">

   <compass name="default">
      <connection>
          <file path="target/test-index"/>
      </connection>
   
      <mappings>
          <class name="test.Author" />
      </mappings>
   
   </compass>
</compass-core-config>                
]]></programlisting>
        </para>
     
        <para>
           The next sample configures a jdbc based index, with a bigger buffer size for default file entries:
        
<programlisting><![CDATA[<compass-core-config xmlns="http://www.opensymphony.com/compass/schema/core-config"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.opensymphony.com/compass/schema/core-config
          http://www.opensymphony.com/compass/schema/compass-core-config.xsd">

   <compass name="default">

     <connection>
         <jdbc dialect="org.apache.lucene.store.jdbc.dialect.HSQLDialect">
             <dataSourceProvider>
                 <driverManager url="jdbc:hsqldb:mem:test" username="sa" password="" 
                                driverClass="org.hsqldb.jdbcDriver" />
             </dataSourceProvider>
             <fileEntries>
                 <fileEntry name="__default__">
                     <indexInput bufferSize="4096" />
                     <indexOutput bufferSize="4096" />
                 </fileEntry>
             </fileEntries>
         </jdbc>
     </connection>
   </compass>
</compass-core-config>
]]></programlisting>     
         </para>

        <para>
           The next sample configures a jdbc based index, with a JTA transaction (note the managed="true" and commitBeforeCompletion="true"):

<programlisting><![CDATA[<compass-core-config xmlns="http://www.opensymphony.com/compass/schema/core-config"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.opensymphony.com/compass/schema/core-config
          http://www.opensymphony.com/compass/schema/compass-core-config.xsd">

   <compass name="default">

     <connection>
         <jdbc dialect="org.apache.lucene.store.jdbc.dialect.HSQLDialect" managed="true">
             <dataSourceProvider>
                 <driverManager url="jdbc:hsqldb:mem:test" username="sa" password="" 
                                driverClass="org.hsqldb.jdbcDriver" />
             </dataSourceProvider>
         </jdbc>
     </connection>
     <transaction factory="org.compass.core.transaction.JTASyncTransactionFactory" commitBeforeCompletion="true">
     </transaction>
   </compass>
</compass-core-config>
]]></programlisting>     
         </para>
      
         <para>
            Here is another sample, that configures another analyzer, a specialized Converter, and changed the default date format for all Java Dates (date is an internal name that maps to Compass default date Converter).
         
<programlisting><![CDATA[<compass-core-config xmlns="http://www.opensymphony.com/compass/schema/core-config"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.opensymphony.com/compass/schema/core-config
          http://www.opensymphony.com/compass/schema/compass-core-config.xsd">

   <compass name="default">

      <connection>
          <file path="target/test-index"/>
      </connection>
   
      <converters>
          <converter name="date" type="org.compass.core.converter.basic.DateConverter">
              <setting name="format" value="yyyy-MM-dd" />
          </converter>
          <converter name="myConverter" type="test.Myconverter" />
      </converters>
   
      <searchEngine>
          <analyzer name="test" type="Snowball" snowballType="Lovins">
              <stopWords>
                  <stopWord value="test" />
              </stopWords>
          </analyzer>
      </searchEngine>
   </compass>
</compass-core-config>
]]></programlisting>     
         </para>
      
         <para>
            The next configuration uses batch_insert transaction, with a higher max buffered documents for faster batch indexing.

<programlisting><![CDATA[<compass-core-config xmlns="http://www.opensymphony.com/compass/schema/core-config"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.opensymphony.com/compass/schema/core-config
         http://www.opensymphony.com/compass/schema/compass-core-config.xsd">

  <compass name="default">

     <connection>
         <file path="target/test-index"/>
     </connection>

     <transaction isolation="batch_insert">
         <batchInsertSettings maxBufferedDocs="100" />
     </transaction>
  </compass>
</compass-core-config>
]]></programlisting>     
        </para>
    </sect2>

  <sect2 id="XMLConfigurationDTD">
    <title>DTD Based Configuration</title>
      
      <para>
         Compass can be configured using a DTD based xml configuration. The DTD configuration is less expressive than the schema based one, allowing to configure mappings and Compass settings. The Configuration Settings are explained in an appendix.
      </para>

      <para>
        And here is an example of the xml configuration file:
<programlisting><![CDATA[<!DOCTYPE compass-core-configuration PUBLIC
"-//Compass/Compass Core Configuration DTD 1.0//EN"
"http://www.opensymphony.com/compass/dtd/compass-core-configuration.dtd">

<compass-core-configuration>
  <compass>
    <setting name="compass.engine.connection">my/index/dir</setting>

    <meta-data resource="vocabulary/DublinCore.cmd.xml" />
    <mapping resource="test/Author.cpm.xml" />

  </compass>
</compass-core-configuration>
]]></programlisting>
    </para>
    
    </sect2>

  </sect1>

  <sect1 id="ObtainingCompassReference">
    <title>Obtaining a Compass reference</title>

    <para>
      After <literal>CompassConfiguration</literal> has been set (either programmatic or using the XML configuration file), you can now build a <literal>Compass</literal> instance. <literal>Compass</literal> is intended to be shared among different application threads. The following simple code example shows how to obtain a <literal>Compass</literal> reference.
<programlisting><![CDATA[Compass compass = cfg.buildCompass();
]]></programlisting>
            Note: It is possible to have multiple <literal>Compass</literal> instances within the same application, each with a different configuration.
    </para>

  </sect1>

</chapter>
