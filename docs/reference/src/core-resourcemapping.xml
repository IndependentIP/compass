<chapter id="core-resourcemaping">
    <title>Resource Mapping</title>

    <sect1 id="resourcemapping-introduction">
      <title>Introduction</title>

      <para>
        Compass::Core provides OSEM technology for use with an applications Object domain model. Compass::Core also provides  Resource Mapping technology for resources other than Objects (that do not benefit from OSEM). The benefits of using Resources can be summarised as:

        <itemizedlist>
          <listitem>
            <para>
               Your application does not have a domain model (therefore cannot use OSEM), but you still want to use the functionality of Compass.
            </para>
          </listitem>
          <listitem>
            <para>
                Your application already works with Lucene, but you want to add Compass::Core additional features (i.e. transactions, fast updates). Working with <literal>Resources</literal> makes your migration easy.
            </para>
          </listitem>
          <listitem>
            <para>
               You execute a query and want to update all the meta-data (<literal>Resource Property</literal>) with a certain value. You use OSEM in your application, but you do not wish to iterate
               through the results, performing run-time object type checking and casting to the appropriate object type before method call. You can simply use the <literal>Resource</literal> interface and treat all the results in the same abstracted way.
            </para>
          </listitem>
        </itemizedlist>

      </para>

    </sect1>

    <sect1 id="Mapping Declaration">
      <title>Mapping Declaration</title>

      <para>
        In order to work directly with a <literal>Resource</literal>, Compass needs to know the alias and the primary properties (i.e. primary keys in data-base systems) associated with the <literal>Resource</literal>. The primary properties are also known as id properties. This information is declared in Resource Mapping XML documents, so that Compass knows how to manage the <literal>Resource</literal> internally.
      </para>

      <para>
        Here is an example of a Resource Mapping XML document:

<programlisting><![CDATA[<?xml version="1.0"?>
<!DOCTYPE compass-core-mapping PUBLIC
    "-//Compass/Compass Core Mapping DTD 1.0//EN"
    "http://www.opensymphony.com/compass/dtd/compass-core-mapping.dtd">

<compass-core-mapping>

  <resource alias="a">
    <resource-id name="id" />
  </resource>

  <resource alias="b">
    <resource-id name="id1" />
    <resource-id name="id2" />
  </resource>

  <resource alias="c">
    <resource-id name="id" />
    <resource-property name="value1" />
    <resource-property name="value2" store="yes" index="tokenized" />
    <resource-property name="value3" store="compress" index="tokenized" />
    <resource-property name="value4" store="yes" index="un_tokenized" />
    <resource-property name="value5" store="yes" index="no" />
  </resource>
</compass-core-mapping>
]]></programlisting>

      </para>

      <para>
        Now that the Resource Mapping has be declared, you can create the Resource in the application. In the following code example the Resource is created with an alias and id property matching the Resource Mapping declaration.
      </para>

      <para>
<programlisting><![CDATA[Resource r = session.createResource("a");
Property id = session.createProperty("id", "1",
    Property.Store.YES, Property.Index.UN_TOKENIZED);
r.addProperty(id);
r.addProperty(session.createProperty("mvalue", "property test",
    Property.Store.YES, Property.Index.TOKENIZED));

session.save(r);]]></programlisting>
      </para>

      <para>
          The Resource Mapping file example above defines mappings for two resources (each identified with a different alias). Each resource has a set of resource ids that are associated with it. The value for the <literal>resource-id</literal> tag is the name of the <literal>
          Property</literal> that is associated with the primary property for the <literal>Resource</literal>.
      </para>

      <para>
        The third mapping (alias "c"), defined <literal>resource-property</literal> mappings as well as <literal>resource-id</literal> mappings. The <literal>resource-property</literal> mapping works with the <literal>Resource#addProperty(String name, Object value)</literal> operation. It provides definitions for the resource properties that are added (<literal>index</literal>, <literal>store</literal>, and so on), and they are then looked up when using the mentioned add method. Using the <literal>resource-property</literal> mapping, helps clean up the code when constructing a <literal>Resource</literal>, since all the <literal>Property</literal> characteristics are defined in the mapping definition, as well as auto conversion from different objects, and the ability to define new ones. Note that the <literal>resource-property</literal> definition will only work with the mentioned addProperty method, and no other addProperty method.
      </para>

      <para>
          All XML mappings should declare the doctype shown. The actual DTD may be found at the URL above or in the <literal>compass-core-x.x.x.jar</literal>. Compass will always look for the DTD in the classpath first.
      </para>

      <para>
          There are no <literal>compass-core-mapping</literal> attributes that are applicable when working with resource mappings.
      </para>

      <sect2 id="resource">
        <title>resource</title>

        <para>
          You may declare a resource mapping using the <literal>resource</literal> element:

<programlisting><![CDATA[<resource
      alias="aliasName"
      sub-index="sub index name"
      analyzer="name of the analyzer"
      all="true|false"
      all-term-vector="no|yes|positions|offsets|positios_offsets"
      all-metadata="name of all metadata"
/>
    resource-id*,
    (resource-analyzer?),
    (resource-property)*
]]></programlisting>

          <table>
            <tgroup cols="2">
              <colspec colname="c1" colwidth="3*" />
              <colspec colname="c2" colwidth="5*" />
              <thead>
                <row>
                  <entry>Attribute</entry><entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>alias</entry>
                  <entry>The name of the alias that represents the <literal>Resource</literal>.</entry>
                </row>
                <row>
                  <entry>sub-index (optional, defaults to the <literal>alias</literal> value</entry>
                  <entry>The name of the sub-index that the alias will map to.</entry>
                </row>
                <row>
                  <entry>analyzer (optional, defaults to the <literal>default</literal> analyzer)</entry>
                  <entry>The name of the analyzer that will be used to analyze <literal>TOKENIZED</literal> properties. Defaults to the <literal>default</literal> analyzer which is one of the internal analyzers that comes with Compass. Note, that when using the <literal>resource-analyzer</literal> mapping (a child mapping of resource mapping) (for a resource property value that controls the analyzer), the analyzer attribute will have no effects.</entry>
                </row>
                <row>
                  <entry>all (optional, defaults to <literal>true</literal>)</entry>
                  <entry>Specifies if when persisting the <literal>Resource</literal>, Compass::Core will create the all property (which represents all the properties/meta-data values).</entry>
                </row>
                <row>
                  <entry>all-term-vector (optional, defaults to configuration setting <literal>compass.property.all.termVector</literal>)</entry>
                  <entry>The term vector value of the all property.</entry>
                </row>
                <row>
                  <entry>all-metadata (optional, defaults to the setting)</entry>
                  <entry>The name of the all meta-data (property).</entry>
                </row>
              </tbody>
            </tgroup>
        </table>

    </para>

  </sect2>

  <sect2 id="resource-id">
      <title>resource-id</title>

   <para>
     Mapped <literal>Resource's</literal> must declare at least one <literal>resource-id</literal>. The <literal>resource-id</literal> element defines the <literal>Property</literal> that identifies the <literal>Resource</literal> for the specified alias.

<programlisting><![CDATA[<resource-id
      name="idName"
/>
]]></programlisting>

        <table>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="3*" />
            <colspec colname="c2" colwidth="5*" />
            <thead>
              <row>
                <entry>Attribute</entry><entry>Description</entry>
              </row>
            </thead>
            <tbody>
             <row>
                <entry>name</entry>
                <entry>The name of the <literal>Property</literal> (known also as the name of the meta-data) that is the id of the <literal>Resource</literal>.</entry>
              </row>
            </tbody>
         </tgroup>
        </table>

      </para>

    </sect2>

    <sect2 id="resource-property">
      <title>resource-property</title>

      <para>
        Declaring and using the <literal>resource-property</literal> element.

 <programlisting><![CDATA[<resource-property
      name="property name"
      store="yes|no|compress"
      index="tokenized|un_tokenized|no"
      boost="boost value for the property"
      analyzer="name of the analyzer"
      reverse="no|reader|string"
      exclude-from-all="[parent's exclude-from-all]|false|true"
      converter="fully qualified converter class name"
      converter-param="parameter for the converter"
>
   (converter-param)*,
</resource-property>]]></programlisting>

        <table><tgroup cols="2">
          <colspec colname="c1" colwidth="3*" />
          <colspec colname="c2" colwidth="5*" />
          <thead>
            <row><entry>Attribute</entry><entry>Description</entry></row>
          </thead>
          <tbody>
            <row>
              <entry>name</entry>
              <entry>The name of the <literal>Property</literal> (known also as the name of the meta-data).</entry>
            </row>
            <row>
              <entry>store (optional, defaults to <literal>yes</literal>)</entry>
              <entry>If the value of the resource property is going to be stored in the index.</entry>
            </row>
            <row>
              <entry>index (optional, defaults to <literal>tokenized</literal>)</entry>
              <entry>If the value of the resource property is going to be indexed (searchable). If it does, than controls if the value is going to be broken down and analysed (<literal>tokenized</literal>), or is going to be used as is (<literal>un_tokenized</literal>).</entry>
            </row>
            <row>
              <entry>boost (optional, defaults to <literal>1.0f</literal>)</entry>
              <entry>Controls the boost level for the resource property.</entry>
            </row>
            <row>
              <entry>analyzer (optional, defaults to the resource mapping analyzer decision scheme)</entry>
              <entry>The name of the analyzer that will be used to analyze <literal>TOKENIZED</literal> resource property mappings defined for the given property. Defaults to the resource mapping analyzer decision scheme based on the analyzer set, or the <literal>resource-analyzer</literal> mapping.</entry>.
            </row>
            <row>
              <entry>exclude-from-all (optional, default to <literal>false</literal>)</entry>
              <entry>Excludes the property from participating in the "all" meta-data.</entry>
            </row>
            <row>
              <entry>override (optional, defaults to <literal>true</literal>)</entry>
              <entry>If there is another definition with the same mapping name, if it will be overridden or added as additional mapping. Mainly used to override definitions made in extended mappings.</entry>
            </row>
            <row>
              <entry>reverse (optional, defaults to <literal>no</literal>)</entry>
              <entry>The meta-data will have it's value reversed. Can have the values of <literal>no</literal> - no reverse will happen, <literal>string</literal> - the reverse will happen and the value stored will be a reversed string, and <literal>reader</literal> - a special reader will wrap the string and reverse it. The <literal>reader</literal> option is more perform ant, but the <literal>store</literal> and <literal>index</literal> settings will be discarded.</entry>
            </row>
            <row>
                <entry>converter (optional)</entry>
                <entry>The fully qualified class of a custom converter.</entry>
            </row>
            <row>
                <entry>converter-param (optional)</entry>
                <entry>A single parameter for the converter (none required for the default one).</entry>
            </row>
          </tbody>
        </tgroup></table>

        <para>
          Defines the charectaristics of a <literal>Resource</literal> <literal>Property</literal> identified by the <literal>name</literal> mapping. The definition only applies when using the <literal>Resource#addProperty(String name, Object value)</literal> operation, and the operation can only be used with the <literal>resourcde-property</literal> mapping.
        </para>

        <para>
          Note that other <literal>Resource</literal> <literal>Property</literal> can be added that are not defined in the resource mapping using the <literal>createProperty</literal> operation.
        </para>

      </para>

    </sect2>

    <sect2 id="resource-analyzer">
      <title>resource-analyzer</title>

      <para>
        Declaring an analyzer controller property using the <literal>resource-analyzer</literal> element.

<programlisting><![CDATA[<resource-analyzer
      name="property name"
      null-analyzer="analyzer name if value is null"
      converter="fully qualified converter class name"
      converter-param="parameter for the converter"
>
</resource-analyzer>]]></programlisting>

        <table>
          <tgroup cols="2">
            <colspec colname="c1" colwidth="3*" />
            <colspec colname="c2" colwidth="5*" />
            <thead>
              <row><entry>Attribute</entry><entry>Description</entry></row>
            </thead>
            <tbody>
              <row>
                <entry>name</entry>
                <entry>The name of the <literal>Property</literal> (known also as the name of the meta-data).</entry>
              </row>
              <row>
                <entry>null-analyzer (optional, defaults to error in case of a <literal>null</literal> value)</entry>
                <entry>The name of the analyzer that will be used if the property has the <literal>null</literal> value.</entry>
              </row>
              <row>
                  <entry>converter (optional)</entry>
                  <entry>The fully qualified class of a custom converter.</entry>
              </row>
              <row>
                  <entry>converter-param (optional)</entry>
                  <entry>A single parameter for the converter (none required for the default one).</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>
          The analyzer resource property mapping, controls the analyzer that will be used when indexing the <literal>Resource</literal>. If the mapping is defined, it will override the resource mapping analyzer attribute setting.
        </para>

        <para>
          If, for example, Compass is configured to have two additional analyzers, called <literal>an1</literal> (and have settings in the form of <literal>compass.engine.analyzer.an1.*</literal>), and another called <literal>an2</literal>. The values that the resource property can hold are: <literal>default</literal> (which is an internal Compass analyzer, that can be configured as well), <literal>an1</literal> and <literal>an2</literal>. If the analyzer will have a <literal>null</literal> value, and it is applicable with the application, than a <literal>null-analyzer</literal> can be configured that will be used in that case. If the resource property has a value, but there is not matching analyzer, an exception will be thrown.
        </para>

      </para>

    </sect2>

  </sect1>

</chapter>
